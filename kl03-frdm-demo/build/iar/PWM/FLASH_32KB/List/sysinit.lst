###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        29/Feb/2016  22:11:45
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\src\cpu\sysinit.c
#    Command line =  
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\src\cpu\sysinit.c -D
#        IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\projects\PWM\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\platforms\
#        -I C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\
#        -I
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\..\..\..\src\drivers\tpm\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\FLASH_32KB\List\sysinit.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\build\iar\PWM\FLASH_32KB\Obj\sysinit.o
#
###############################################################################

C:\Users\b51443\Desktop\FRDM_KL03Z\kl03-frdm-demo\src\cpu\sysinit.c
      1          /*
      2           * File:        sysinit.c
      3           * Purpose:     Kinetis Configuration
      4           *              Initializes processor to a default state
      5           *
      6           * Notes:
      7           *
      8           */
      9          
     10          #include "common.h"
     11          #include "sysinit.h"
     12          #include "uart.h"
     13          #include "mcg_lite.h"
     14          /********************************************************************/
     15          
     16          /* Actual system clock frequency */

   \                                 In section .bss, align 4
     17          int mcg_clk_hz;
   \                     mcg_clk_hz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          int mcg_clk_khz;
   \                     mcg_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     20          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     21          int pll_clk_khz;
   \                     pll_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          int uart0_clk_khz;
   \                     uart0_clk_khz:
   \   00000000                      DS8 4
     23          
     24          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     25          void sysinit (void)
     26          {
   \                     sysinit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     27              /* Enable all of the port clocks. These have to be enabled to configure
     28               * pin muxing options, so most code will need all of these on anyway.
     29               */
     30              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK);
   \   00000002   0x482A             LDR      R0,??sysinit_0   ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x21C0             MOVS     R1,#+192
   \   00000008   0x00C9             LSLS     R1,R1,#+3        ;; #+1536
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x4827             LDR      R0,??sysinit_0   ;; 0x40048038
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     31              
     32              // releases hold with ACKISO:  Only has an effect if recovering from VLLS1, VLLS2, or VLLS3
     33              // if ACKISO is set you must clear ackiso before calling pll_init 
     34              //    or pll init hangs waiting for OSC to initialize
     35              // if osc enabled in low power modes - enable it first before ack
     36              // if I/O needs to be maintained without glitches enable outputs and modules first before ack.
     37              if (PMC_REGSC &  PMC_REGSC_ACKISO_MASK)
   \   00000010   0x4827             LDR      R0,??sysinit_0+0x4  ;; 0x4007d002
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0700             LSLS     R0,R0,#+28
   \   00000016   0xD505             BPL      ??sysinit_1
     38              PMC_REGSC |= PMC_REGSC_ACKISO_MASK;
   \   00000018   0x4825             LDR      R0,??sysinit_0+0x4  ;; 0x4007d002
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2108             MOVS     R1,#+8
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0x4823             LDR      R0,??sysinit_0+0x4  ;; 0x4007d002
   \   00000022   0x7001             STRB     R1,[R0, #+0]
     39          #ifdef MCG_HIRC_MODE_EN
     40              mcg_clk_hz = MCG_HIRC48();
   \                     ??sysinit_1: (+1)
   \   00000024   0x.... 0x....      BL       MCG_HIRC48
   \   00000028   0x4922             LDR      R1,??sysinit_0+0x8
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     41              
     42              if(mcg_clk_hz==0)
   \   0000002C   0x4821             LDR      R0,??sysinit_0+0x8
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD102             BNE      ??sysinit_2
     43              {
     44                  mcg_clk_hz = MCG_IRC8M;
   \   00000034   0x4820             LDR      R0,??sysinit_0+0xC  ;; 0x895440
   \   00000036   0x491F             LDR      R1,??sysinit_0+0x8
   \   00000038   0x6008             STR      R0,[R1, #+0]
     45              }
     46            
     47            SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); // select the 48MHz IRC as UART0 clock source
   \                     ??sysinit_2: (+1)
   \   0000003A   0x4820             LDR      R0,??sysinit_0+0x10  ;; 0x40048004
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x04C9             LSLS     R1,R1,#+19       ;; #+67108864
   \   00000042   0x4301             ORRS     R1,R1,R0
   \   00000044   0x481D             LDR      R0,??sysinit_0+0x10  ;; 0x40048004
   \   00000046   0x6001             STR      R1,[R0, #+0]
     48          
     49            uart0_clk_khz = mcg_clk_hz;
   \   00000048   0x481A             LDR      R0,??sysinit_0+0x8
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x491C             LDR      R1,??sysinit_0+0x14
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     50          #else
     51              /* default setting */
     52              mcg_clk_hz = MCG_IRC8M;
     53              SIM_SOPT2 |= SIM_SOPT2_UART0SRC(3); // select the MCGIRCLK as UART0 clock source
     54              uart0_clk_khz = MCG_IRC8M;
     55          #endif
     56          
     57           
     58          	/*
     59                   * Use the value obtained from the pll_init function to define variables
     60          	 * for the core clock in kHz and also the peripheral clock. These
     61          	 * variables can be used by other functions that need awareness of the
     62          	 * system frequency.
     63          	 */
     64              mcg_clk_khz = mcg_clk_hz / 1000;
   \   00000050   0x4818             LDR      R0,??sysinit_0+0x8
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x21FA             MOVS     R1,#+250
   \   00000056   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000058   0x.... 0x....      BL       __aeabi_idiv
   \   0000005C   0x4919             LDR      R1,??sysinit_0+0x18
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     65              core_clk_khz = mcg_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> 28)+ 1);
   \   00000060   0x4818             LDR      R0,??sysinit_0+0x18
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x4918             LDR      R1,??sysinit_0+0x1C  ;; 0x40048044
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x0F09             LSRS     R1,R1,#+28
   \   0000006A   0x1C49             ADDS     R1,R1,#+1
   \   0000006C   0x.... 0x....      BL       __aeabi_uidiv
   \   00000070   0x4916             LDR      R1,??sysinit_0+0x20
   \   00000072   0x6008             STR      R0,[R1, #+0]
     66              periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV4_MASK) >> 16)+ 1);
   \   00000074   0x4815             LDR      R0,??sysinit_0+0x20
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x4913             LDR      R1,??sysinit_0+0x1C  ;; 0x40048044
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0x0C09             LSRS     R1,R1,#+16
   \   0000007E   0x0749             LSLS     R1,R1,#+29       ;; ZeroExtS R1,R1,#+29,#+29
   \   00000080   0x0F49             LSRS     R1,R1,#+29
   \   00000082   0x1C49             ADDS     R1,R1,#+1
   \   00000084   0x.... 0x....      BL       __aeabi_uidiv
   \   00000088   0x4911             LDR      R1,??sysinit_0+0x24
   \   0000008A   0x6008             STR      R0,[R1, #+0]
     67                  
     68                
     69              /* configure LPUART pin mux to PTB3,PTB4 */   // wenxue
     70            	//PORTB_PCR3 = PORT_PCR_MUX(0x3); 
     71            	//PORTB_PCR4 = PORT_PCR_MUX(0x3); 
     72              
     73              /* configure LPUART pin mux to PTB1,PTB2 */   // wenxue
     74            	PORTB_PCR1 = PORT_PCR_MUX(0x2); 
   \   0000008C   0x2080             MOVS     R0,#+128
   \   0000008E   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000090   0x4910             LDR      R1,??sysinit_0+0x28  ;; 0x4004a004
   \   00000092   0x6008             STR      R0,[R1, #+0]
     75            	PORTB_PCR2 = PORT_PCR_MUX(0x2); 
   \   00000094   0x2080             MOVS     R0,#+128
   \   00000096   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000098   0x490F             LDR      R1,??sysinit_0+0x2C  ;; 0x4004a008
   \   0000009A   0x6008             STR      R0,[R1, #+0]
     76                
     77             
     78              uart0_init (TERM_PORT,uart0_clk_khz,TERMINAL_BAUD);        
   \   0000009C   0x2296             MOVS     R2,#+150
   \   0000009E   0x01D2             LSLS     R2,R2,#+7        ;; #+19200
   \   000000A0   0x4807             LDR      R0,??sysinit_0+0x14
   \   000000A2   0x6801             LDR      R1,[R0, #+0]
   \   000000A4   0x480D             LDR      R0,??sysinit_0+0x30  ;; 0x40054000
   \   000000A6   0x.... 0x....      BL       uart0_init
     79          }
   \   000000AA   0xBD01             POP      {R0,PC}          ;; return
   \                     ??sysinit_0:
   \   000000AC   0x40048038         DC32     0x40048038
   \   000000B0   0x4007D002         DC32     0x4007d002
   \   000000B4   0x........         DC32     mcg_clk_hz
   \   000000B8   0x00895440         DC32     0x895440
   \   000000BC   0x40048004         DC32     0x40048004
   \   000000C0   0x........         DC32     uart0_clk_khz
   \   000000C4   0x........         DC32     mcg_clk_khz
   \   000000C8   0x40048044         DC32     0x40048044
   \   000000CC   0x........         DC32     core_clk_khz
   \   000000D0   0x........         DC32     periph_clk_khz
   \   000000D4   0x4004A004         DC32     0x4004a004
   \   000000D8   0x4004A008         DC32     0x4004a008
   \   000000DC   0x40054000         DC32     0x40054000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   sysinit
         8   -> MCG_HIRC48
         8   -> uart0_init
         8 __aeabi_idiv
         8 __aeabi_uidiv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  core_clk_khz
       4  mcg_clk_hz
       4  mcg_clk_khz
       4  periph_clk_khz
       4  pll_clk_khz
     224  sysinit
       4  uart0_clk_khz

 
  24 bytes in section .bss
 224 bytes in section .text
 
 224 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: 1
