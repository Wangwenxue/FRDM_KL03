###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        09/Mar/2016  19:35:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\memtest.c
#    Command line =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\memtest.c
#        -D IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\projects\adc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\platforms\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\adc\
#        -On --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\memtest.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\memtest.o
#
###############################################################################

C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\memtest.c
      1          /**********************************************************************
      2           *
      3           * Filename:    memtest.c
      4           * 
      5           * Description: General-purpose memory testing functions.
      6           *
      7           * Notes:       This software can be easily ported to systems with
      8           *              different data bus widths by redefining 'datum'.
      9           *
     10           * 
     11           * Copyright (c) 1998 by Michael Barr.  This software is placed into
     12           * the public domain and may be used for any purpose.  However, this
     13           * notice must not be changed or removed and no warranty is either
     14           * expressed or implied by its publication or distribution.
     15           **********************************************************************/
     16          
     17          
     18          #include "memtest.h"
     19          
     20          
     21          /**********************************************************************
     22           *
     23           * Function:    memTestDataBus()
     24           *
     25           * Description: Test the data bus wiring in a memory region by
     26           *              performing a walking 1's test at a fixed address
     27           *              within that region.  The address (and hence the
     28           *              memory region) is selected by the caller.
     29           *
     30           * Notes:       
     31           *
     32           * Returns:     0 if the test succeeds.  
     33           *              A non-zero result is the first pattern that failed.
     34           *
     35           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          datum
     37          memTestDataBus(volatile datum * address)
     38          {
   \                     memTestDataBus: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
     39              datum pattern;
     40          
     41          
     42              /*
     43               * Perform a walking 1's test at the given address.
     44               */
     45              for (pattern = 1; pattern != 0; pattern <<= 1)
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x0002             MOVS     R2,R0
   \                     ??memTestDataBus_0: (+1)
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD007             BEQ      ??memTestDataBus_1
     46              {
     47                  /*
     48                   * Write the test pattern.
     49                   */
     50                  *address = pattern;
   \   0000000C   0x600A             STR      R2,[R1, #+0]
     51          
     52                  /*
     53                   * Read it back (immediately is okay for this test).
     54                   */
     55                  if (*address != pattern) 
   \   0000000E   0x6808             LDR      R0,[R1, #+0]
   \   00000010   0x4290             CMP      R0,R2
   \   00000012   0xD001             BEQ      ??memTestDataBus_2
     56                  {
     57                      return (pattern);
   \   00000014   0x0010             MOVS     R0,R2
   \   00000016   0xE002             B        ??memTestDataBus_3
     58                  }
     59              }
   \                     ??memTestDataBus_2: (+1)
   \   00000018   0x0052             LSLS     R2,R2,#+1
   \   0000001A   0xE7F5             B        ??memTestDataBus_0
     60          
     61              return (0);
   \                     ??memTestDataBus_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??memTestDataBus_3: (+1)
   \   0000001E   0xBD00             POP      {PC}             ;; return
     62          
     63          }   /* memTestDataBus() */
     64          
     65          
     66          /**********************************************************************
     67           *
     68           * Function:    memTestAddressBus()
     69           *
     70           * Description: Test the address bus wiring in a memory region by
     71           *              performing a walking 1's test on the relevant bits
     72           *              of the address and checking for aliasing. This test
     73           *              will find single-bit address failures such as stuck
     74           *              -high, stuck-low, and shorted pins.  The base address
     75           *              and size of the region are selected by the caller.
     76           *
     77           * Notes:       For best results, the selected base address should
     78           *              have enough LSB 0's to guarantee single address bit
     79           *              changes.  For example, to test a 64-Kbyte region, 
     80           *              select a base address on a 64-Kbyte boundary.  Also, 
     81           *              select the region size as a power-of-two--if at all 
     82           *              possible.
     83           *
     84           * Returns:     NULL if the test succeeds.  
     85           *              A non-zero result is the first address at which an
     86           *              aliasing problem was uncovered.  By examining the
     87           *              contents of memory, it may be possible to gather
     88           *              additional information about the problem.
     89           *
     90           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          datum * 
     92          memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes)
     93          {
   \                     memTestAddressBus: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
     94              unsigned long addressMask = (nBytes/sizeof(datum) - 1);
   \   00000004   0x000B             MOVS     R3,R1
   \   00000006   0x089B             LSRS     R3,R3,#+2
   \   00000008   0x1E5B             SUBS     R3,R3,#+1
     95              unsigned long offset;
     96              unsigned long testOffset;
     97          
     98              datum pattern     = (datum) 0xAAAAAAAA;
   \   0000000A   0x....             LDR      R5,??DataTable0  ;; 0xaaaaaaaa
     99              datum antipattern = (datum) 0x55555555;
   \   0000000C   0x....             LDR      R6,??DataTable0_1  ;; 0x55555555
    100          
    101          
    102              /*
    103               * Write the default pattern at each of the power-of-two offsets.
    104               */
    105              for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x0007             MOVS     R7,R0
   \                     ??memTestAddressBus_0: (+1)
   \   00000012   0x421F             TST      R7,R3
   \   00000014   0xD004             BEQ      ??memTestAddressBus_1
    106              {
    107                  baseAddress[offset] = pattern;
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x4378             MULS     R0,R7,R0
   \   0000001A   0x5015             STR      R5,[R2, R0]
    108              }
   \   0000001C   0x007F             LSLS     R7,R7,#+1
   \   0000001E   0xE7F8             B        ??memTestAddressBus_0
    109          
    110              /* 
    111               * Check for address bits stuck high.
    112               */
    113              testOffset = 0;
   \                     ??memTestAddressBus_1: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x0004             MOVS     R4,R0
    114              baseAddress[testOffset] = antipattern;
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0x4360             MULS     R0,R4,R0
   \   00000028   0x5016             STR      R6,[R2, R0]
    115          
    116              for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x0007             MOVS     R7,R0
   \                     ??memTestAddressBus_2: (+1)
   \   0000002E   0x421F             TST      R7,R3
   \   00000030   0xD00A             BEQ      ??memTestAddressBus_3
    117              {
    118                  if (baseAddress[offset] != pattern)
   \   00000032   0x2004             MOVS     R0,#+4
   \   00000034   0x4378             MULS     R0,R7,R0
   \   00000036   0x5810             LDR      R0,[R2, R0]
   \   00000038   0x42A8             CMP      R0,R5
   \   0000003A   0xD003             BEQ      ??memTestAddressBus_4
    119                  {
    120                      return ((datum *) &baseAddress[offset]);
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x4347             MULS     R7,R0,R7
   \   00000040   0x19D0             ADDS     R0,R2,R7
   \   00000042   0xE029             B        ??memTestAddressBus_5
    121                  }
    122              }
   \                     ??memTestAddressBus_4: (+1)
   \   00000044   0x007F             LSLS     R7,R7,#+1
   \   00000046   0xE7F2             B        ??memTestAddressBus_2
    123          
    124              baseAddress[testOffset] = pattern;
   \                     ??memTestAddressBus_3: (+1)
   \   00000048   0x2004             MOVS     R0,#+4
   \   0000004A   0x4360             MULS     R0,R4,R0
   \   0000004C   0x5015             STR      R5,[R2, R0]
    125          
    126              /*
    127               * Check for address bits stuck low or shorted.
    128               */
    129              for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x0004             MOVS     R4,R0
   \                     ??memTestAddressBus_6: (+1)
   \   00000052   0x421C             TST      R4,R3
   \   00000054   0xD01F             BEQ      ??memTestAddressBus_7
    130              {
    131                  baseAddress[testOffset] = antipattern;
   \   00000056   0x2004             MOVS     R0,#+4
   \   00000058   0x4360             MULS     R0,R4,R0
   \   0000005A   0x5016             STR      R6,[R2, R0]
    132          
    133          		if (baseAddress[0] != pattern)
   \   0000005C   0x6810             LDR      R0,[R2, #+0]
   \   0000005E   0x42A8             CMP      R0,R5
   \   00000060   0xD003             BEQ      ??memTestAddressBus_8
    134          		{
    135          			return ((datum *) &baseAddress[testOffset]);
   \   00000062   0x2004             MOVS     R0,#+4
   \   00000064   0x4344             MULS     R4,R0,R4
   \   00000066   0x1910             ADDS     R0,R2,R4
   \   00000068   0xE016             B        ??memTestAddressBus_5
    136          		}
    137          
    138                  for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
   \                     ??memTestAddressBus_8: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x0007             MOVS     R7,R0
   \                     ??memTestAddressBus_9: (+1)
   \   0000006E   0x421F             TST      R7,R3
   \   00000070   0xD00C             BEQ      ??memTestAddressBus_10
    139                  {
    140                      if ((baseAddress[offset] != pattern) && (offset != testOffset))
   \   00000072   0x2004             MOVS     R0,#+4
   \   00000074   0x4378             MULS     R0,R7,R0
   \   00000076   0x5810             LDR      R0,[R2, R0]
   \   00000078   0x42A8             CMP      R0,R5
   \   0000007A   0xD005             BEQ      ??memTestAddressBus_11
   \   0000007C   0x42A7             CMP      R7,R4
   \   0000007E   0xD003             BEQ      ??memTestAddressBus_11
    141                      {
    142                          return ((datum *) &baseAddress[testOffset]);
   \   00000080   0x2004             MOVS     R0,#+4
   \   00000082   0x4344             MULS     R4,R0,R4
   \   00000084   0x1910             ADDS     R0,R2,R4
   \   00000086   0xE007             B        ??memTestAddressBus_5
    143                      }
    144                  }
   \                     ??memTestAddressBus_11: (+1)
   \   00000088   0x007F             LSLS     R7,R7,#+1
   \   0000008A   0xE7F0             B        ??memTestAddressBus_9
    145          
    146                  baseAddress[testOffset] = pattern;
   \                     ??memTestAddressBus_10: (+1)
   \   0000008C   0x2004             MOVS     R0,#+4
   \   0000008E   0x4360             MULS     R0,R4,R0
   \   00000090   0x5015             STR      R5,[R2, R0]
    147              }
   \   00000092   0x0064             LSLS     R4,R4,#+1
   \   00000094   0xE7DD             B        ??memTestAddressBus_6
    148          
    149              return (NULL);
   \                     ??memTestAddressBus_7: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??memTestAddressBus_5: (+1)
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
    150          
    151          }   /* memTestAddressBus() */
    152          
    153          
    154          /**********************************************************************
    155           *
    156           * Function:    memTestDevice()
    157           *
    158           * Description: Test the integrity of a physical memory device by
    159           *              performing an increment/decrement test over the
    160           *              entire region.  In the process every storage bit 
    161           *              in the device is tested as a zero and a one.  The
    162           *              base address and the size of the region are
    163           *              selected by the caller.
    164           *
    165           * Notes:       
    166           *
    167           * Returns:     NULL if the test succeeds.
    168           *
    169           *              A non-zero result is the first address at which an
    170           *              incorrect value was read back.  By examining the
    171           *              contents of memory, it may be possible to gather
    172           *              additional information about the problem.
    173           *
    174           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    175          datum * 
    176          memTestDevice(volatile datum * baseAddress, unsigned long nBytes)	
    177          {
   \                     memTestDevice: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0002             MOVS     R2,R0
    178              unsigned long offset;
    179              unsigned long nWords = nBytes / sizeof(datum);
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x08A4             LSRS     R4,R4,#+2
    180          
    181              datum pattern;
    182              datum antipattern;
    183          
    184          
    185              /*
    186               * Fill memory with a known pattern.
    187               */
    188              for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x0005             MOVS     R5,R0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0003             MOVS     R3,R0
   \                     ??memTestDevice_0: (+1)
   \   00000010   0x42A3             CMP      R3,R4
   \   00000012   0xD205             BCS      ??memTestDevice_1
    189              {
    190                  baseAddress[offset] = pattern;
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x4358             MULS     R0,R3,R0
   \   00000018   0x5015             STR      R5,[R2, R0]
    191              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0x1C5B             ADDS     R3,R3,#+1
   \   0000001E   0xE7F7             B        ??memTestDevice_0
    192          
    193              /*
    194               * Check each location and invert it for the second pass.
    195               */
    196              for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
   \                     ??memTestDevice_1: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0003             MOVS     R3,R0
   \                     ??memTestDevice_2: (+1)
   \   00000028   0x42A3             CMP      R3,R4
   \   0000002A   0xD210             BCS      ??memTestDevice_3
    197              {
    198                  if (baseAddress[offset] != pattern)
   \   0000002C   0x2004             MOVS     R0,#+4
   \   0000002E   0x4358             MULS     R0,R3,R0
   \   00000030   0x5810             LDR      R0,[R2, R0]
   \   00000032   0x42A8             CMP      R0,R5
   \   00000034   0xD003             BEQ      ??memTestDevice_4
    199                  {
    200                      return ((datum *) &baseAddress[offset]);
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x4343             MULS     R3,R0,R3
   \   0000003A   0x18D0             ADDS     R0,R2,R3
   \   0000003C   0xE01C             B        ??memTestDevice_5
    201                  }
    202          
    203                  antipattern = ~pattern;
   \                     ??memTestDevice_4: (+1)
   \   0000003E   0x43E8             MVNS     R0,R5
   \   00000040   0x0006             MOVS     R6,R0
    204                  baseAddress[offset] = antipattern;
   \   00000042   0x2004             MOVS     R0,#+4
   \   00000044   0x4358             MULS     R0,R3,R0
   \   00000046   0x5016             STR      R6,[R2, R0]
    205              }
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \   0000004A   0x1C5B             ADDS     R3,R3,#+1
   \   0000004C   0xE7EC             B        ??memTestDevice_2
    206          
    207              /*
    208               * Check each location for the inverted pattern and zero it.
    209               */
    210              for (pattern = 1, offset = 0; offset < nWords; pattern++, offset++)
   \                     ??memTestDevice_3: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x0003             MOVS     R3,R0
   \                     ??memTestDevice_6: (+1)
   \   00000056   0x42A3             CMP      R3,R4
   \   00000058   0xD20D             BCS      ??memTestDevice_7
    211              {
    212                  antipattern = ~pattern;
   \   0000005A   0x43E8             MVNS     R0,R5
   \   0000005C   0x0006             MOVS     R6,R0
    213                  if (baseAddress[offset] != antipattern)
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x4358             MULS     R0,R3,R0
   \   00000062   0x5810             LDR      R0,[R2, R0]
   \   00000064   0x42B0             CMP      R0,R6
   \   00000066   0xD003             BEQ      ??memTestDevice_8
    214                  {
    215                      return ((datum *) &baseAddress[offset]);
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x4343             MULS     R3,R0,R3
   \   0000006C   0x18D0             ADDS     R0,R2,R3
   \   0000006E   0xE003             B        ??memTestDevice_5
    216                  }
    217              }
   \                     ??memTestDevice_8: (+1)
   \   00000070   0x1C6D             ADDS     R5,R5,#+1
   \   00000072   0x1C5B             ADDS     R3,R3,#+1
   \   00000074   0xE7EF             B        ??memTestDevice_6
    218          
    219              return (NULL);
   \                     ??memTestDevice_7: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??memTestDevice_5: (+1)
   \   00000078   0xBD70             POP      {R4-R6,PC}       ;; return
    220          
    221          }   /* memTestDevice() */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0xAAAAAAAA         DC32     0xaaaaaaaa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x55555555         DC32     0x55555555

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   memTestAddressBus
       4   memTestDataBus
      16   memTestDevice


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     154  memTestAddressBus
      32  memTestDataBus
     122  memTestDevice

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
