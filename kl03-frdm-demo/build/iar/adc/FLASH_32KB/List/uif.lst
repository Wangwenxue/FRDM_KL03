###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        09/Mar/2016  19:35:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\uif.c
#    Command line =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\uif.c
#        -D IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\projects\adc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\platforms\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\adc\
#        -On --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\uif.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\uif.o
#
###############################################################################

C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\uif.c
      1          /*
      2           * File:    uif.c
      3           * Purpose: Provide an interactive user interface
      4           *              
      5           * Notes:   The commands, set/show parameters, and prompt are configured 
      6           *          at the project level
      7           */
      8          
      9          #include "common.h"
     10          #include "uif.h"
     11          /********************************************************************/
     12          /*
     13           * Global messages -- constant strings
     14           */

   \                                 In section .rodata, align 4
     15          const char HELPMSG[] =
   \                     HELPMSG:
   \   00000000   0x45 0x6E          DC8 "Enter 'help' for help.\012"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x27 0x68    
   \              0x65 0x6C    
   \              0x70 0x27    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x70 0x2E    
   \              0x0A 0x00    
     16              "Enter 'help' for help.\n";
     17          

   \                                 In section .rodata, align 4
     18          const char INVARG[] =
   \                     INVARG:
   \   00000000   0x45 0x72          DC8 "Error: Invalid argument: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x61    
   \              0x72 0x67    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     19              "Error: Invalid argument: %s\n";
     20          

   \                                 In section .rodata, align 4
     21          const char INVALUE[] = 
   \                     INVALUE:
   \   00000000   0x45 0x72          DC8 "Error: Invalid value: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0
     22              "Error: Invalid value: %s\n";
     23          
     24          /*
     25           * Strings used by this file only
     26           */

   \                                 In section .rodata, align 4
     27          static const char INVCMD[] =
   \                     INVCMD:
   \   00000000   0x45 0x72          DC8 "Error: No such command: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x73 0x75    
   \              0x63 0x68    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
     28              "Error: No such command: %s\n";
     29          

   \                                 In section .rodata, align 4
     30          static const char HELPFORMAT[] = 
   \                     HELPFORMAT:
   \   00000000   0x25 0x38          DC8 "%8s  %-25s %s %s\012"
   \              0x73 0x20    
   \              0x20 0x25    
   \              0x2D 0x32    
   \              0x35 0x73    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
     31              "%8s  %-25s %s %s\n";
     32          

   \                                 In section .rodata, align 4
     33          static const char SYNTAX[] = 
   \                     SYNTAX:
   \   00000000   0x45 0x72          DC8 "Error: Invalid syntax for: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x73    
   \              0x79 0x6E    
   \              0x74 0x61    
   \              0x78 0x20    
   \              0x66 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0
     34              "Error: Invalid syntax for: %s\n";
     35          

   \                                 In section .rodata, align 4
     36          static const char INVOPT[] = 
   \                     INVOPT:
   \   00000000   0x45 0x72          DC8 "Error:  Invalid set/show option: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \              0x49 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x74 0x2F    
   \              0x73 0x68    
   \              0x6F 0x77    
   \              0x20 0x6F    
   \              0x70 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     37              "Error:  Invalid set/show option: %s\n";
     38          

   \                                 In section .rodata, align 4
     39          static const char OPTFMT[] = 
   \                     OPTFMT:
   \   00000000   0x25 0x31          DC8 "%12s: "
   \              0x32 0x73    
   \              0x3A 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
     40              "%12s: ";
     41          

   \                                 In section .bss, align 4
     42          static char cmdline1 [UIF_MAX_LINE];
   \                     cmdline1:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
     43          static char cmdline2 [UIF_MAX_LINE];
   \                     cmdline2:
   \   00000000                      DS8 80
     44          
     45          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     46          char *
     47          get_line (char *line)
     48          {
   \                     get_line: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     49              int pos;
     50              int ch;
     51          
     52              pos = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
     53              ch = (int)in_char();
   \   00000008   0x.... 0x....      BL       in_char
   \   0000000C   0x0006             MOVS     R6,R0
     54              while ( (ch != 0x0D /* CR */) &&
     55                      (ch != 0x0A /* LF/NL */) &&
     56                      (pos < UIF_MAX_LINE))
   \                     ??get_line_0: (+1)
   \   0000000E   0x2E0D             CMP      R6,#+13
   \   00000010   0xD028             BEQ      ??get_line_1
   \   00000012   0x2E0A             CMP      R6,#+10
   \   00000014   0xD026             BEQ      ??get_line_1
   \   00000016   0x2D50             CMP      R5,#+80
   \   00000018   0xDA24             BGE      ??get_line_1
     57              {
     58                  switch (ch)
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xD001             BEQ      ??get_line_2
   \   00000020   0x287F             CMP      R0,#+127
   \   00000022   0xD10C             BNE      ??get_line_3
     59                  {
     60                      case 0x08:      /* Backspace */
     61                      case 0x7F:      /* Delete */
     62                          if (pos > 0)
   \                     ??get_line_2: (+1)
   \   00000024   0x2D01             CMP      R5,#+1
   \   00000026   0xDB09             BLT      ??get_line_4
     63                          {
     64                              pos -= 1;
   \   00000028   0x1E6D             SUBS     R5,R5,#+1
     65                              out_char(0x08);    /* backspace */
   \   0000002A   0x2008             MOVS     R0,#+8
   \   0000002C   0x.... 0x....      BL       out_char
     66                              out_char(' ');
   \   00000030   0x2020             MOVS     R0,#+32
   \   00000032   0x.... 0x....      BL       out_char
     67                              out_char(0x08);    /* backspace */
   \   00000036   0x2008             MOVS     R0,#+8
   \   00000038   0x.... 0x....      BL       out_char
     68                          }
     69                          break;
   \                     ??get_line_4: (+1)
   \   0000003C   0xE00E             B        ??get_line_5
     70                      default:
     71                          if ((pos+1) < UIF_MAX_LINE)
   \                     ??get_line_3: (+1)
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x2850             CMP      R0,#+80
   \   00000044   0xDA0A             BGE      ??get_line_6
     72                          {
     73                              if ((ch > 0x1f) && (ch < 0x80))
   \   00000046   0x2E20             CMP      R6,#+32
   \   00000048   0xDB08             BLT      ??get_line_6
   \   0000004A   0x2E80             CMP      R6,#+128
   \   0000004C   0xDA06             BGE      ??get_line_6
     74                              {
     75                                  line[pos++] = (char)ch;
   \   0000004E   0x0030             MOVS     R0,R6
   \   00000050   0x5560             STRB     R0,[R4, R5]
   \   00000052   0x1C6D             ADDS     R5,R5,#+1
     76                                  out_char((char)ch);
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0xB2C0             UXTB     R0,R0
   \   00000058   0x.... 0x....      BL       out_char
     77                              }
     78                          }
     79                          break;
     80                  }
     81                  ch = (int)in_char();
   \                     ??get_line_6: (+1)
   \                     ??get_line_5: (+1)
   \   0000005C   0x.... 0x....      BL       in_char
   \   00000060   0x0006             MOVS     R6,R0
   \   00000062   0xE7D4             B        ??get_line_0
     82              }
     83              line[pos] = '\0';
   \                     ??get_line_1: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x5560             STRB     R0,[R4, R5]
     84              out_char(0x0D);    /* CR */
   \   00000068   0x200D             MOVS     R0,#+13
   \   0000006A   0x.... 0x....      BL       out_char
     85              out_char(0x0A);    /* LF */
   \   0000006E   0x200A             MOVS     R0,#+10
   \   00000070   0x.... 0x....      BL       out_char
     86          
     87              return line;
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0xBD70             POP      {R4-R6,PC}       ;; return
     88          }
     89          
     90          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          int
     92          make_argv (char *cmdline, char *argv[])
     93          {
   \                     make_argv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0002             MOVS     R2,R0
     94              int argc, i, in_text;
     95          
     96              /* 
     97               * Break cmdline into strings and argv
     98               * It is permissible for argv to be NULL, in which case
     99               * the purpose of this routine becomes to count args
    100               */
    101              argc = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x0028             MOVS     R0,R5
    102              i = 0;
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x002B             MOVS     R3,R5
    103              in_text = FALSE;
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x002C             MOVS     R4,R5
    104              while (cmdline[i] != '\0')  /* getline() must place 0x00 on end */
   \                     ??make_argv_0: (+1)
   \   00000010   0x5CD5             LDRB     R5,[R2, R3]
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD01D             BEQ      ??make_argv_1
    105              {
    106                  if (((cmdline[i] == ' ')   ||
    107                       (cmdline[i] == '\t')) )
   \   00000016   0x5CD5             LDRB     R5,[R2, R3]
   \   00000018   0x2D20             CMP      R5,#+32
   \   0000001A   0xD002             BEQ      ??make_argv_2
   \   0000001C   0x5CD5             LDRB     R5,[R2, R3]
   \   0000001E   0x2D09             CMP      R5,#+9
   \   00000020   0xD106             BNE      ??make_argv_3
    108                  {
    109                      if (in_text)
   \                     ??make_argv_2: (+1)
   \   00000022   0x2C00             CMP      R4,#+0
   \   00000024   0xD013             BEQ      ??make_argv_4
    110                      {
    111                          /* end of command line argument */
    112                          cmdline[i] = '\0';
   \   00000026   0x2500             MOVS     R5,#+0
   \   00000028   0x54D5             STRB     R5,[R2, R3]
    113                          in_text = FALSE;
   \   0000002A   0x2500             MOVS     R5,#+0
   \   0000002C   0x002C             MOVS     R4,R5
   \   0000002E   0xE00E             B        ??make_argv_4
    114                      }
    115                      else
    116                      {
    117                          /* still looking for next argument */
    118                          
    119                      }
    120                  }
    121                  else
    122                  {
    123                      /* got non-whitespace character */
    124                      if (in_text)
   \                     ??make_argv_3: (+1)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD10C             BNE      ??make_argv_4
    125                      {
    126                      }
    127                      else
    128                      {
    129                          /* start of an argument */
    130                          in_text = TRUE;
   \   00000034   0x2501             MOVS     R5,#+1
   \   00000036   0x002C             MOVS     R4,R5
    131                          if (argc < UIF_MAX_ARGS)
   \   00000038   0x280A             CMP      R0,#+10
   \   0000003A   0xDA07             BGE      ??make_argv_5
    132                          {
    133                              if (argv != NULL)
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD003             BEQ      ??make_argv_6
    134                                  argv[argc] = &cmdline[i];
   \   00000040   0x18D5             ADDS     R5,R2,R3
   \   00000042   0x2604             MOVS     R6,#+4
   \   00000044   0x4346             MULS     R6,R0,R6
   \   00000046   0x518D             STR      R5,[R1, R6]
    135                              argc++;
   \                     ??make_argv_6: (+1)
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0xE000             B        ??make_argv_4
    136                          }
    137                          else
    138                              /*return argc;*/
    139                              break;
   \                     ??make_argv_5: (+1)
   \   0000004C   0xE001             B        ??make_argv_1
    140                      }
    141          
    142                  }
    143                  i++;    /* proceed to next character */
   \                     ??make_argv_4: (+1)
   \   0000004E   0x1C5B             ADDS     R3,R3,#+1
   \   00000050   0xE7DE             B        ??make_argv_0
    144              }
    145              if (argv != NULL)
   \                     ??make_argv_1: (+1)
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD003             BEQ      ??make_argv_7
    146                  argv[argc] = NULL;
   \   00000056   0x2500             MOVS     R5,#+0
   \   00000058   0x2604             MOVS     R6,#+4
   \   0000005A   0x4346             MULS     R6,R0,R6
   \   0000005C   0x518D             STR      R5,[R1, R6]
    147              return argc;
   \                     ??make_argv_7: (+1)
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    148          }
    149          
    150          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          void
    152          run_cmd (void)
    153          {
   \                     run_cmd: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    154              /*
    155               * Global array of pointers to emulate C argc,argv interface
    156               */
    157              int argc;
    158              char *argv[UIF_MAX_ARGS + 1];   /* one extra for null terminator */
    159          
    160              get_line(cmdline1);
   \   00000004   0x....             LDR      R0,??DataTable2
   \   00000006   0x.... 0x....      BL       get_line
    161          
    162              if (!(argc = make_argv(cmdline1,argv)))
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x....             LDR      R0,??DataTable2
   \   0000000E   0x.... 0x....      BL       make_argv
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD108             BNE      ??run_cmd_0
    163              {
    164                  /* no command entered, just a blank line */
    165                  strcpy(cmdline1,cmdline2);
   \   00000018   0x....             LDR      R1,??DataTable2_1
   \   0000001A   0x....             LDR      R0,??DataTable2
   \   0000001C   0x.... 0x....      BL       strcpy
    166                  argc = make_argv(cmdline1,argv);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR      R0,??DataTable2
   \   00000024   0x.... 0x....      BL       make_argv
   \   00000028   0x0005             MOVS     R5,R0
    167              }
    168              cmdline2[0] = '\0';
   \                     ??run_cmd_0: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR      R1,??DataTable2_1
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    169          
    170              if (argc)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD040             BEQ      ??run_cmd_1
    171              {
    172                  int i;
    173                  for (i = 0; i < UIF_NUM_CMD; i++)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x0004             MOVS     R4,R0
   \                     ??run_cmd_2: (+1)
   \   00000038   0x....             LDR      R0,??DataTable3
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xDA33             BGE      ??run_cmd_3
    174                  {
    175                      if (strcasecmp(UIF_CMDTAB[i].cmd,argv[0]) == 0)
   \   00000040   0x9900             LDR      R1,[SP, #+0]
   \   00000042   0x....             LDR      R0,??DataTable3_1
   \   00000044   0x221C             MOVS     R2,#+28
   \   00000046   0x4362             MULS     R2,R4,R2
   \   00000048   0x5880             LDR      R0,[R0, R2]
   \   0000004A   0x.... 0x....      BL       strcasecmp
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD128             BNE      ??run_cmd_4
    176                      {
    177                          if (((argc-1) >= UIF_CMDTAB[i].min_args) &&
    178                              ((argc-1) <= UIF_CMDTAB[i].max_args))
   \   00000052   0x1E68             SUBS     R0,R5,#+1
   \   00000054   0x....             LDR      R1,??DataTable3_1
   \   00000056   0x221C             MOVS     R2,#+28
   \   00000058   0x4362             MULS     R2,R4,R2
   \   0000005A   0x1889             ADDS     R1,R1,R2
   \   0000005C   0x6849             LDR      R1,[R1, #+4]
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xDB1B             BLT      ??run_cmd_5
   \   00000062   0x....             LDR      R0,??DataTable3_1
   \   00000064   0x211C             MOVS     R1,#+28
   \   00000066   0x4361             MULS     R1,R4,R1
   \   00000068   0x1840             ADDS     R0,R0,R1
   \   0000006A   0x6880             LDR      R0,[R0, #+8]
   \   0000006C   0x1E69             SUBS     R1,R5,#+1
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDB13             BLT      ??run_cmd_5
    179                          {
    180                              if (UIF_CMDTAB[i].flags & UIF_CMD_FLAG_REPEAT)
   \   00000072   0x....             LDR      R0,??DataTable3_1
   \   00000074   0x211C             MOVS     R1,#+28
   \   00000076   0x4361             MULS     R1,R4,R1
   \   00000078   0x1840             ADDS     R0,R0,R1
   \   0000007A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000007C   0x07C0             LSLS     R0,R0,#+31
   \   0000007E   0xD503             BPL      ??run_cmd_6
    181                              {
    182                                  strcpy(cmdline2,argv[0]);
   \   00000080   0x9900             LDR      R1,[SP, #+0]
   \   00000082   0x....             LDR      R0,??DataTable2_1
   \   00000084   0x.... 0x....      BL       strcpy
    183                              }
    184                              UIF_CMDTAB[i].func(argc,argv);
   \                     ??run_cmd_6: (+1)
   \   00000088   0x4669             MOV      R1,SP
   \   0000008A   0x0028             MOVS     R0,R5
   \   0000008C   0x....             LDR      R2,??DataTable3_1
   \   0000008E   0x231C             MOVS     R3,#+28
   \   00000090   0x4363             MULS     R3,R4,R3
   \   00000092   0x18D2             ADDS     R2,R2,R3
   \   00000094   0x6912             LDR      R2,[R2, #+16]
   \   00000096   0x4790             BLX      R2
    185                              return;
   \   00000098   0xE00D             B        ??run_cmd_7
    186                          }
    187                          else
    188                          {
    189                              printf(SYNTAX,argv[0]);
   \                     ??run_cmd_5: (+1)
   \   0000009A   0x9900             LDR      R1,[SP, #+0]
   \   0000009C   0x....             LDR      R0,??DataTable3_2
   \   0000009E   0x.... 0x....      BL       printf
    190                              return;
   \   000000A2   0xE008             B        ??run_cmd_7
    191                          }
    192                      }
    193                  }
   \                     ??run_cmd_4: (+1)
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
   \   000000A6   0xE7C7             B        ??run_cmd_2
    194                  printf(INVCMD,argv[0]);
   \                     ??run_cmd_3: (+1)
   \   000000A8   0x9900             LDR      R1,[SP, #+0]
   \   000000AA   0x....             LDR      R0,??DataTable3_3
   \   000000AC   0x.... 0x....      BL       printf
    195                  printf(HELPMSG);
   \   000000B0   0x....             LDR      R0,??DataTable3_4
   \   000000B2   0x.... 0x....      BL       printf
    196              }
    197          }
   \                     ??run_cmd_1: (+1)
   \                     ??run_cmd_7: (+1)
   \   000000B6   0xB00B             ADD      SP,SP,#+44
   \   000000B8   0xBD30             POP      {R4,R5,PC}       ;; return
    198          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    199          uint32
    200          get_value (char *s, int *success, int base)
    201          {
   \                     get_value: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0017             MOVS     R7,R2
    202              uint32 value;
    203              char *p;
    204          
    205              value = strtoul(s,&p,base);
   \   00000008   0x003A             MOVS     R2,R7
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       strtoul
   \   00000012   0x0006             MOVS     R6,R0
    206              if ((value == 0) && (p == s))
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD106             BNE      ??get_value_0
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x42A8             CMP      R0,R5
   \   0000001C   0xD103             BNE      ??get_value_0
    207              {
    208                  *success = FALSE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x6020             STR      R0,[R4, #+0]
    209                  return 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE002             B        ??get_value_1
    210              }
    211              else
    212              {
    213                  *success = TRUE;
   \                     ??get_value_0: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x6020             STR      R0,[R4, #+0]
    214                  return value;
   \   0000002A   0x0030             MOVS     R0,R6
   \                     ??get_value_1: (+1)
   \   0000002C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    215              }
    216          }
    217          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    218          void
    219          uif_cmd_help (int argc, char **argv)
    220          {
   \                     uif_cmd_help: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000D             MOVS     R5,R1
    221              int index;
    222              
    223              (void)argc;
    224              (void)argv;
    225              
    226              printf("\n");
   \   00000008   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   0000000A   0x.... 0x....      BL       printf
    227              for (index = 0; index < UIF_NUM_CMD; index++)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0004             MOVS     R4,R0
   \                     ??uif_cmd_help_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable3
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xDA17             BGE      ??uif_cmd_help_1
    228              {
    229                  printf(HELPFORMAT,
    230                      UIF_CMDTAB[index].cmd,
    231                      UIF_CMDTAB[index].description,
    232                      UIF_CMDTAB[index].cmd,
    233                      UIF_CMDTAB[index].syntax);
   \   0000001A   0x....             LDR      R0,??DataTable3_1
   \   0000001C   0x211C             MOVS     R1,#+28
   \   0000001E   0x4361             MULS     R1,R4,R1
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0x6980             LDR      R0,[R0, #+24]
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x....             LDR      R0,??DataTable3_1
   \   00000028   0x211C             MOVS     R1,#+28
   \   0000002A   0x4361             MULS     R1,R4,R1
   \   0000002C   0x5843             LDR      R3,[R0, R1]
   \   0000002E   0x....             LDR      R0,??DataTable3_1
   \   00000030   0x211C             MOVS     R1,#+28
   \   00000032   0x4361             MULS     R1,R4,R1
   \   00000034   0x1840             ADDS     R0,R0,R1
   \   00000036   0x6942             LDR      R2,[R0, #+20]
   \   00000038   0x....             LDR      R0,??DataTable3_1
   \   0000003A   0x211C             MOVS     R1,#+28
   \   0000003C   0x4361             MULS     R1,R4,R1
   \   0000003E   0x5841             LDR      R1,[R0, R1]
   \   00000040   0x....             LDR      R0,??DataTable3_6
   \   00000042   0x.... 0x....      BL       printf
    234              }
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \   00000048   0xE7E3             B        ??uif_cmd_help_0
    235              printf("\n");
   \                     ??uif_cmd_help_1: (+1)
   \   0000004A   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   0000004C   0x.... 0x....      BL       printf
    236          }
   \   00000050   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    237          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          void
    239          uif_cmd_set (int argc, char **argv)
    240          {
   \                     uif_cmd_set: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
    241              int index;
    242          
    243              printf("\n");
   \   00000006   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   00000008   0x.... 0x....      BL       printf
    244              if (argc == 1)
   \   0000000C   0x2E01             CMP      R6,#+1
   \   0000000E   0xD11D             BNE      ??uif_cmd_set_0
    245              {
    246                  printf("Valid 'set' options:\n");
   \   00000010   0x....             LDR      R0,??DataTable3_7
   \   00000012   0x.... 0x....      BL       printf
    247                  for (index = 0; index < UIF_NUM_SETCMD; ++index)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
   \                     ??uif_cmd_set_1: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable3_8
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xDA10             BGE      ??uif_cmd_set_2
    248                  {
    249                      printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \   00000022   0x....             LDR      R0,??DataTable3_9
   \   00000024   0x2114             MOVS     R1,#+20
   \   00000026   0x4369             MULS     R1,R5,R1
   \   00000028   0x5841             LDR      R1,[R0, R1]
   \   0000002A   0x....             LDR      R0,??DataTable3_10
   \   0000002C   0x.... 0x....      BL       printf
    250                      printf("%s\n",UIF_SETCMDTAB[index].syntax);
   \   00000030   0x....             LDR      R0,??DataTable3_9
   \   00000032   0x2114             MOVS     R1,#+20
   \   00000034   0x4369             MULS     R1,R5,R1
   \   00000036   0x1840             ADDS     R0,R0,R1
   \   00000038   0x6901             LDR      R1,[R0, #+16]
   \   0000003A   0x....             ADR      R0,??DataTable3_11  ;; "%s\n"
   \   0000003C   0x.... 0x....      BL       printf
    251                  }
   \   00000040   0x1C6D             ADDS     R5,R5,#+1
   \   00000042   0xE7EA             B        ??uif_cmd_set_1
    252                  printf("\n");
   \                     ??uif_cmd_set_2: (+1)
   \   00000044   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   00000046   0x.... 0x....      BL       printf
    253                  return;
   \   0000004A   0xE038             B        ??uif_cmd_set_3
    254              }
    255          
    256              if (argc != 3)
   \                     ??uif_cmd_set_0: (+1)
   \   0000004C   0x2E03             CMP      R6,#+3
   \   0000004E   0xD003             BEQ      ??uif_cmd_set_4
    257              {
    258                  printf("Error: Invalid argument list\n");
   \   00000050   0x....             LDR      R0,??DataTable3_12
   \   00000052   0x.... 0x....      BL       printf
    259                  return;
   \   00000056   0xE032             B        ??uif_cmd_set_3
    260              }
    261          
    262              for (index = 0; index < UIF_NUM_SETCMD; index++)
   \                     ??uif_cmd_set_4: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0005             MOVS     R5,R0
   \                     ??uif_cmd_set_5: (+1)
   \   0000005C   0x....             LDR      R0,??DataTable3_8
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x4285             CMP      R5,R0
   \   00000062   0xDA28             BGE      ??uif_cmd_set_6
    263              {
    264                  if (strcasecmp(UIF_SETCMDTAB[index].option,argv[1]) == 0)
   \   00000064   0x6861             LDR      R1,[R4, #+4]
   \   00000066   0x....             LDR      R0,??DataTable3_9
   \   00000068   0x2214             MOVS     R2,#+20
   \   0000006A   0x436A             MULS     R2,R5,R2
   \   0000006C   0x5880             LDR      R0,[R0, R2]
   \   0000006E   0x.... 0x....      BL       strcasecmp
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD11D             BNE      ??uif_cmd_set_7
    265                  {
    266                      if (((argc-1-1) >= UIF_SETCMDTAB[index].min_args) &&
    267                          ((argc-1-1) <= UIF_SETCMDTAB[index].max_args))
   \   00000076   0x1EB0             SUBS     R0,R6,#+2
   \   00000078   0x....             LDR      R1,??DataTable3_9
   \   0000007A   0x2214             MOVS     R2,#+20
   \   0000007C   0x436A             MULS     R2,R5,R2
   \   0000007E   0x1889             ADDS     R1,R1,R2
   \   00000080   0x6849             LDR      R1,[R1, #+4]
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xDB10             BLT      ??uif_cmd_set_8
   \   00000086   0x....             LDR      R0,??DataTable3_9
   \   00000088   0x2114             MOVS     R1,#+20
   \   0000008A   0x4369             MULS     R1,R5,R1
   \   0000008C   0x1840             ADDS     R0,R0,R1
   \   0000008E   0x6880             LDR      R0,[R0, #+8]
   \   00000090   0x1EB1             SUBS     R1,R6,#+2
   \   00000092   0x4288             CMP      R0,R1
   \   00000094   0xDB08             BLT      ??uif_cmd_set_8
    268                      {
    269                          UIF_SETCMDTAB[index].func(argc,argv);
   \   00000096   0x0021             MOVS     R1,R4
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x....             LDR      R2,??DataTable3_9
   \   0000009C   0x2314             MOVS     R3,#+20
   \   0000009E   0x436B             MULS     R3,R5,R3
   \   000000A0   0x18D2             ADDS     R2,R2,R3
   \   000000A2   0x68D2             LDR      R2,[R2, #+12]
   \   000000A4   0x4790             BLX      R2
    270                          return;
   \   000000A6   0xE00A             B        ??uif_cmd_set_3
    271                      }
    272                      else
    273                      {
    274                          printf(INVARG,argv[1]);
   \                     ??uif_cmd_set_8: (+1)
   \   000000A8   0x6861             LDR      R1,[R4, #+4]
   \   000000AA   0x....             LDR      R0,??DataTable3_13
   \   000000AC   0x.... 0x....      BL       printf
    275                          return;
   \   000000B0   0xE005             B        ??uif_cmd_set_3
    276                      }
    277                  }
    278              }
   \                     ??uif_cmd_set_7: (+1)
   \   000000B2   0x1C6D             ADDS     R5,R5,#+1
   \   000000B4   0xE7D2             B        ??uif_cmd_set_5
    279              printf(INVOPT,argv[1]);
   \                     ??uif_cmd_set_6: (+1)
   \   000000B6   0x6861             LDR      R1,[R4, #+4]
   \   000000B8   0x....             LDR      R0,??DataTable3_14
   \   000000BA   0x.... 0x....      BL       printf
    280          }
   \                     ??uif_cmd_set_3: (+1)
   \   000000BE   0xBD70             POP      {R4-R6,PC}       ;; return
    281          
    282          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    283          void
    284          uif_cmd_show (int argc, char **argv)
    285          {
   \                     uif_cmd_show: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
    286              int index;
    287          
    288              printf("\n");
   \   00000006   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   00000008   0x.... 0x....      BL       printf
    289              if (argc == 1)
   \   0000000C   0x2E01             CMP      R6,#+1
   \   0000000E   0xD121             BNE      ??uif_cmd_show_0
    290              {
    291                  /*
    292                   * Show all Option settings
    293                   */
    294                  argc = 2;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x0006             MOVS     R6,R0
    295                  argv[2] = NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x60A0             STR      R0,[R4, #+8]
    296                  for (index = 0; index < UIF_NUM_SETCMD; index++)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
   \                     ??uif_cmd_show_1: (+1)
   \   0000001C   0x....             LDR      R0,??DataTable3_8
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x4285             CMP      R5,R0
   \   00000022   0xDA13             BGE      ??uif_cmd_show_2
    297                  {
    298                      printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \   00000024   0x....             LDR      R0,??DataTable3_9
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0x4369             MULS     R1,R5,R1
   \   0000002A   0x5841             LDR      R1,[R0, R1]
   \   0000002C   0x....             LDR      R0,??DataTable3_10
   \   0000002E   0x.... 0x....      BL       printf
    299                      UIF_SETCMDTAB[index].func(argc,argv);
   \   00000032   0x0021             MOVS     R1,R4
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0x....             LDR      R2,??DataTable3_9
   \   00000038   0x2314             MOVS     R3,#+20
   \   0000003A   0x436B             MULS     R3,R5,R3
   \   0000003C   0x18D2             ADDS     R2,R2,R3
   \   0000003E   0x68D2             LDR      R2,[R2, #+12]
   \   00000040   0x4790             BLX      R2
    300                      printf("\n");
   \   00000042   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   00000044   0x.... 0x....      BL       printf
    301                  }
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \   0000004A   0xE7E7             B        ??uif_cmd_show_1
    302                  printf("\n");
   \                     ??uif_cmd_show_2: (+1)
   \   0000004C   0x....             ADR      R0,??DataTable3_5  ;; "\n"
   \   0000004E   0x.... 0x....      BL       printf
    303                  return;
   \   00000052   0xE03C             B        ??uif_cmd_show_3
    304              }
    305          
    306              for (index = 0; index < UIF_NUM_SETCMD; index++)
   \                     ??uif_cmd_show_0: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x0005             MOVS     R5,R0
   \                     ??uif_cmd_show_4: (+1)
   \   00000058   0x....             LDR      R0,??DataTable3_8
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x4285             CMP      R5,R0
   \   0000005E   0xDA32             BGE      ??uif_cmd_show_5
    307              {
    308                  if (strcasecmp(UIF_SETCMDTAB[index].option,argv[1]) == 0)
   \   00000060   0x6861             LDR      R1,[R4, #+4]
   \   00000062   0x....             LDR      R0,??DataTable3_9
   \   00000064   0x2214             MOVS     R2,#+20
   \   00000066   0x436A             MULS     R2,R5,R2
   \   00000068   0x5880             LDR      R0,[R0, R2]
   \   0000006A   0x.... 0x....      BL       strcasecmp
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD127             BNE      ??uif_cmd_show_6
    309                  {
    310                      if (((argc-1-1) >= UIF_SETCMDTAB[index].min_args) &&
    311                          ((argc-1-1) <= UIF_SETCMDTAB[index].max_args))
   \   00000072   0x1EB0             SUBS     R0,R6,#+2
   \   00000074   0x....             LDR      R1,??DataTable3_9
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x436A             MULS     R2,R5,R2
   \   0000007A   0x1889             ADDS     R1,R1,R2
   \   0000007C   0x6849             LDR      R1,[R1, #+4]
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xDB1A             BLT      ??uif_cmd_show_7
   \   00000082   0x....             LDR      R0,??DataTable3_9
   \   00000084   0x2114             MOVS     R1,#+20
   \   00000086   0x4369             MULS     R1,R5,R1
   \   00000088   0x1840             ADDS     R0,R0,R1
   \   0000008A   0x6880             LDR      R0,[R0, #+8]
   \   0000008C   0x1EB1             SUBS     R1,R6,#+2
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xDB12             BLT      ??uif_cmd_show_7
    312                      {
    313                          printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \   00000092   0x....             LDR      R0,??DataTable3_9
   \   00000094   0x2114             MOVS     R1,#+20
   \   00000096   0x4369             MULS     R1,R5,R1
   \   00000098   0x5841             LDR      R1,[R0, R1]
   \   0000009A   0x....             LDR      R0,??DataTable3_10
   \   0000009C   0x.... 0x....      BL       printf
    314                          UIF_SETCMDTAB[index].func(argc,argv);
   \   000000A0   0x0021             MOVS     R1,R4
   \   000000A2   0x0030             MOVS     R0,R6
   \   000000A4   0x....             LDR      R2,??DataTable3_9
   \   000000A6   0x2314             MOVS     R3,#+20
   \   000000A8   0x436B             MULS     R3,R5,R3
   \   000000AA   0x18D2             ADDS     R2,R2,R3
   \   000000AC   0x68D2             LDR      R2,[R2, #+12]
   \   000000AE   0x4790             BLX      R2
    315                          printf("\n\n");
   \   000000B0   0x....             ADR      R0,??DataTable3_15  ;; 0x0A, 0x0A, 0x00, 0x00
   \   000000B2   0x.... 0x....      BL       printf
    316                          return;
   \   000000B6   0xE00A             B        ??uif_cmd_show_3
    317                      }
    318                      else
    319                      {
    320                          printf(INVARG,argv[1]);
   \                     ??uif_cmd_show_7: (+1)
   \   000000B8   0x6861             LDR      R1,[R4, #+4]
   \   000000BA   0x....             LDR      R0,??DataTable3_13
   \   000000BC   0x.... 0x....      BL       printf
    321                          return;
   \   000000C0   0xE005             B        ??uif_cmd_show_3
    322                      }
    323                  }
    324              }
   \                     ??uif_cmd_show_6: (+1)
   \   000000C2   0x1C6D             ADDS     R5,R5,#+1
   \   000000C4   0xE7C8             B        ??uif_cmd_show_4
    325              printf(INVOPT,argv[1]);
   \                     ??uif_cmd_show_5: (+1)
   \   000000C6   0x6861             LDR      R1,[R4, #+4]
   \   000000C8   0x....             LDR      R0,??DataTable3_14
   \   000000CA   0x.... 0x....      BL       printf
    326          }
   \                     ??uif_cmd_show_3: (+1)
   \   000000CE   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     cmdline1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     cmdline2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     UIF_NUM_CMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     UIF_CMDTAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     SYNTAX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     INVCMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     HELPMSG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     HELPFORMAT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     UIF_NUM_SETCMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     UIF_SETCMDTAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     OPTFMT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x25 0x73          DC8      "%s\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     INVARG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     INVOPT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x0A 0x0A          DC8      0x0A, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x56 0x61          DC8 "Valid 'set' options:\012"
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x27 0x73    
   \              0x65 0x74    
   \              0x27 0x20    
   \              0x6F 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x3A    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x73          DC8 "%s\012"
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x45 0x72          DC8 "Error: Invalid argument list\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x61    
   \              0x72 0x67    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0A          DC8 "\012\012"
   \              0x00         
   \   00000003   0x00               DC8 0
    327          
    328          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   get_line
        16   -> in_char
        16   -> out_char
      24   get_value
        24   -> strtoul
      16   make_argv
      56   run_cmd
        56   -- Indirect call
        56   -> get_line
        56   -> make_argv
        56   -> printf
        56   -> strcasecmp
        56   -> strcpy
      24   uif_cmd_help
        24   -> printf
      16   uif_cmd_set
        16   -- Indirect call
        16   -> printf
        16   -> strcasecmp
      16   uif_cmd_show
        16   -- Indirect call
        16   -> printf
        16   -> strcasecmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       2  ?_0
      24  ?_1
       4  ?_2
      32  ?_3
       4  ?_4
      20  HELPFORMAT
      24  HELPMSG
      28  INVALUE
      32  INVARG
      28  INVCMD
      40  INVOPT
       8  OPTFMT
      32  SYNTAX
      80  cmdline1
      80  cmdline2
     120  get_line
      46  get_value
      96  make_argv
     186  run_cmd
      82  uif_cmd_help
     192  uif_cmd_set
     208  uif_cmd_show

 
   160 bytes in section .bss
   278 bytes in section .rodata
 1 002 bytes in section .text
 
 1 002 bytes of CODE  memory
   278 bytes of CONST memory
   160 bytes of DATA  memory

Errors: none
Warnings: none
