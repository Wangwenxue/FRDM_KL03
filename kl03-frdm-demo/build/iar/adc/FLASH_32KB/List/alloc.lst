###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        09/Mar/2016  19:35:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\alloc.c
#    Command line =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\alloc.c
#        -D IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\projects\adc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\platforms\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\
#        -I
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\..\..\..\src\drivers\adc\
#        -On --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\List\alloc.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\build\iar\adc\FLASH_32KB\Obj\alloc.o
#
###############################################################################

C:\Users\b51443\Desktop\GitResp\FRDM_KL03\kl03-frdm-demo\src\common\alloc.c
      1          /*
      2           * File:        alloc.c
      3           * Purpose:     generic malloc() and free() engine
      4           *
      5           *
      6           */
      7          
      8          #include "common.h"
      9          #include "stdlib.h"
     10          
     11          #ifndef __CC_ARM
     12          #pragma section = "HEAP"
     13          #endif
     14          
     15          /********************************************************************/
     16          
     17          /*
     18           * This struct forms the minimum block size which is allocated, and
     19           * also forms the linked list for the memory space used with alloc()
     20           * and free().  It is padded so that on a 32-bit machine, all malloc'ed
     21           * pointers are 16-byte aligned.
     22           */
     23          typedef struct ALLOC_HDR
     24          {
     25              struct
     26              {
     27                  struct ALLOC_HDR     *ptr;
     28                  unsigned int size;
     29              } s;
     30              unsigned int align;
     31              unsigned int pad;
     32          } ALLOC_HDR;
     33          

   \                                 In section .bss, align 4
     34          static ALLOC_HDR base;
   \                     base:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     35          static ALLOC_HDR *freep = NULL;
   \                     freep:
   \   00000000                      DS8 4
     36          
     37          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          void
     39          free (void *ap)
     40          {
   \                     free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0001             MOVS     R1,R0
     41              ALLOC_HDR *bp, *p;
     42          
     43              bp = (ALLOC_HDR *)ap - 1;   /* point to block header */
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x3810             SUBS     R0,R0,#+16
   \   00000008   0x0002             MOVS     R2,R0
     44              for (p = freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \   0000000A   0x....             LDR      R0,??DataTable1
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0003             MOVS     R3,R0
   \                     ??free_0: (+1)
   \   00000010   0x4293             CMP      R3,R2
   \   00000012   0xD202             BCS      ??free_1
   \   00000014   0x6818             LDR      R0,[R3, #+0]
   \   00000016   0x4282             CMP      R2,R0
   \   00000018   0xD30A             BCC      ??free_2
     45              {
     46                  if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??free_1: (+1)
   \   0000001A   0x6818             LDR      R0,[R3, #+0]
   \   0000001C   0x4283             CMP      R3,R0
   \   0000001E   0xD305             BCC      ??free_3
   \   00000020   0x4293             CMP      R3,R2
   \   00000022   0xD302             BCC      ??free_4
   \   00000024   0x6818             LDR      R0,[R3, #+0]
   \   00000026   0x4282             CMP      R2,R0
   \   00000028   0xD200             BCS      ??free_3
     47                  {
     48                      break; /* freed block at start or end of arena */
   \                     ??free_4: (+1)
   \   0000002A   0xE001             B        ??free_2
     49                  }
     50              }
   \                     ??free_3: (+1)
   \   0000002C   0x681B             LDR      R3,[R3, #+0]
   \   0000002E   0xE7EF             B        ??free_0
     51          
     52              if ((bp + bp->s.size) == p->s.ptr)
   \                     ??free_2: (+1)
   \   00000030   0x6850             LDR      R0,[R2, #+4]
   \   00000032   0x2410             MOVS     R4,#+16
   \   00000034   0x4360             MULS     R0,R4,R0
   \   00000036   0x1810             ADDS     R0,R2,R0
   \   00000038   0x681C             LDR      R4,[R3, #+0]
   \   0000003A   0x42A0             CMP      R0,R4
   \   0000003C   0xD108             BNE      ??free_5
     53              {
     54                  bp->s.size += p->s.ptr->s.size;
   \   0000003E   0x6850             LDR      R0,[R2, #+4]
   \   00000040   0x681C             LDR      R4,[R3, #+0]
   \   00000042   0x6864             LDR      R4,[R4, #+4]
   \   00000044   0x1900             ADDS     R0,R0,R4
   \   00000046   0x6050             STR      R0,[R2, #+4]
     55                  bp->s.ptr = p->s.ptr->s.ptr;
   \   00000048   0x6818             LDR      R0,[R3, #+0]
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x6010             STR      R0,[R2, #+0]
   \   0000004E   0xE001             B        ??free_6
     56              }
     57              else
     58              {
     59                  bp->s.ptr = p->s.ptr;
   \                     ??free_5: (+1)
   \   00000050   0x6818             LDR      R0,[R3, #+0]
   \   00000052   0x6010             STR      R0,[R2, #+0]
     60              }
     61          
     62              if ((p + p->s.size) == bp)
   \                     ??free_6: (+1)
   \   00000054   0x6858             LDR      R0,[R3, #+4]
   \   00000056   0x2410             MOVS     R4,#+16
   \   00000058   0x4360             MULS     R0,R4,R0
   \   0000005A   0x1818             ADDS     R0,R3,R0
   \   0000005C   0x4290             CMP      R0,R2
   \   0000005E   0xD106             BNE      ??free_7
     63              {
     64                  p->s.size += bp->s.size;
   \   00000060   0x6858             LDR      R0,[R3, #+4]
   \   00000062   0x6854             LDR      R4,[R2, #+4]
   \   00000064   0x1900             ADDS     R0,R0,R4
   \   00000066   0x6058             STR      R0,[R3, #+4]
     65                  p->s.ptr = bp->s.ptr;
   \   00000068   0x6810             LDR      R0,[R2, #+0]
   \   0000006A   0x6018             STR      R0,[R3, #+0]
   \   0000006C   0xE000             B        ??free_8
     66              }
     67              else
     68              {
     69                  p->s.ptr = bp;
   \                     ??free_7: (+1)
   \   0000006E   0x601A             STR      R2,[R3, #+0]
     70              }
     71          
     72              freep = p;
   \                     ??free_8: (+1)
   \   00000070   0x....             LDR      R0,??DataTable1
   \   00000072   0x6003             STR      R3,[R0, #+0]
     73          }
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
     74          
     75          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          void *
     77          malloc (unsigned nbytes)
     78          {
   \                     malloc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
     79              /* Get addresses for the HEAP start and end */
     80              #if defined(CW)  
     81                extern char __HEAP_START[];
     82                extern char __HEAP_END[];
     83              #elif defined(IAR)
     84                char* __HEAP_START = __section_begin("HEAP");
   \   00000004   0x....             LDR      R2,??DataTable1_1
     85                char* __HEAP_END = __section_end("HEAP");
   \   00000006   0x....             LDR      R3,??DataTable1_2
     86              #elif defined(KEIL)
     87          	  extern uint32_t HEAP$$Base;
     88          	  extern uint32_t HEAP$$Limit;
     89          	  uint32_t __HEAP_START = (uint32_t)&HEAP$$Base;
     90          	  uint32_t __HEAP_END = (uint32_t)&HEAP$$Limit;
     91              #endif
     92             
     93              ALLOC_HDR *p, *prevp;
     94              unsigned nunits;
     95          
     96              nunits = ((nbytes+sizeof(ALLOC_HDR)-1) / sizeof(ALLOC_HDR)) + 1;
   \   00000008   0x0008             MOVS     R0,R1
   \   0000000A   0x300F             ADDS     R0,R0,#+15
   \   0000000C   0x0900             LSRS     R0,R0,#+4
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x0006             MOVS     R6,R0
     97          
     98              if ((prevp = freep) == NULL)
   \   00000012   0x....             LDR      R0,??DataTable1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD110             BNE      ??malloc_0
     99              {
    100                  p = (ALLOC_HDR *)__HEAP_START;
   \   0000001C   0x0014             MOVS     R4,R2
    101                  p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
    102                      / sizeof(ALLOC_HDR) );
   \   0000001E   0x1A98             SUBS     R0,R3,R2
   \   00000020   0x0900             LSRS     R0,R0,#+4
   \   00000022   0x6060             STR      R0,[R4, #+4]
    103                  p->s.ptr = &base;
   \   00000024   0x....             LDR      R0,??DataTable1_3
   \   00000026   0x6020             STR      R0,[R4, #+0]
    104                  base.s.ptr = p;
   \   00000028   0x....             LDR      R0,??DataTable1_3
   \   0000002A   0x6004             STR      R4,[R0, #+0]
    105                  base.s.size = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR      R7,??DataTable1_3
   \   00000030   0x6078             STR      R0,[R7, #+4]
    106                  prevp = freep = &base;
   \   00000032   0x....             LDR      R0,??DataTable1_3
   \   00000034   0x....             LDR      R7,??DataTable1
   \   00000036   0x6038             STR      R0,[R7, #+0]
   \   00000038   0x....             LDR      R0,??DataTable1
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0005             MOVS     R5,R0
    107              }
    108          
    109              for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??malloc_0: (+1)
   \   0000003E   0x6828             LDR      R0,[R5, #+0]
   \   00000040   0x0004             MOVS     R4,R0
    110              {
    111                  if (p->s.size >= nunits)
   \                     ??malloc_1: (+1)
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0x42B0             CMP      R0,R6
   \   00000046   0xD312             BCC      ??malloc_2
    112                  {
    113                      if (p->s.size == nunits)
   \   00000048   0x6860             LDR      R0,[R4, #+4]
   \   0000004A   0x42B0             CMP      R0,R6
   \   0000004C   0xD102             BNE      ??malloc_3
    114                      {
    115                          prevp->s.ptr = p->s.ptr;
   \   0000004E   0x6820             LDR      R0,[R4, #+0]
   \   00000050   0x6028             STR      R0,[R5, #+0]
   \   00000052   0xE007             B        ??malloc_4
    116                      }
    117                      else
    118                      {
    119                          p->s.size -= nunits;
   \                     ??malloc_3: (+1)
   \   00000054   0x6860             LDR      R0,[R4, #+4]
   \   00000056   0x1B80             SUBS     R0,R0,R6
   \   00000058   0x6060             STR      R0,[R4, #+4]
    120                          p += p->s.size;
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0x2710             MOVS     R7,#+16
   \   0000005E   0x4378             MULS     R0,R7,R0
   \   00000060   0x1824             ADDS     R4,R4,R0
    121                          p->s.size = nunits;
   \   00000062   0x6066             STR      R6,[R4, #+4]
    122                      }
    123                      freep = prevp;
   \                     ??malloc_4: (+1)
   \   00000064   0x....             LDR      R0,??DataTable1
   \   00000066   0x6005             STR      R5,[R0, #+0]
    124                      return (void *)(p + 1);
   \   00000068   0x3410             ADDS     R4,R4,#+16
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0xE008             B        ??malloc_5
    125                  }
    126          
    127                  if (p == freep)
   \                     ??malloc_2: (+1)
   \   0000006E   0x....             LDR      R0,??DataTable1
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD101             BNE      ??malloc_6
    128                      return NULL;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xE002             B        ??malloc_5
    129              }
   \                     ??malloc_6: (+1)
   \   0000007A   0x0025             MOVS     R5,R4
   \   0000007C   0x6824             LDR      R4,[R4, #+0]
   \   0000007E   0xE7E0             B        ??malloc_1
   \                     ??malloc_5: (+1)
   \   00000080   0xBDF0             POP      {R4-R7,PC}       ;; return
    130          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     SFB(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     SFE(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     base
    131          
    132          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   free
      20   malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      16  base
     118  free
       4  freep
     130  malloc

 
  20 bytes in section .bss
 264 bytes in section .text
 
 264 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
