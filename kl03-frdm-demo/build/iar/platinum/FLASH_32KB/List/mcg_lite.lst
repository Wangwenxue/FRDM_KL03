###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        22/Feb/2016  16:12:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\mcg\mcg_lite.c
#    Command line =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\mcg\mcg_lite.c
#        -D IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\projects\platinum\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\platforms\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\List\mcg_lite.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\Obj\mcg_lite.o
#
###############################################################################

C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\mcg\mcg_lite.c
      1          /*
      2           * File:    mcg.c
      3           *
      4           * Notes:
      5           * Assumes the MCG-lite mode is in the default LIRC mode out of reset
      6           */
      7          #include "common.h"
      8          #include "mcg_lite.h"
      9          
     10          
     11          unsigned long MCG_HIRC48(void);
     12          

   \                                 In section .text, align 4, keep-with-next
     13          unsigned long MCG_HIRC48(void)
     14          {
   \                     MCG_HIRC48: (+1)
   \   00000000   0xB500             PUSH     {LR}
     15              unsigned long i;
     16              MCG_MC |= MCG_MC_HIRCEN_MASK;
   \   00000002   0x480D             LDR      R0,??MCG_HIRC48_0  ;; 0x40064018
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x480B             LDR      R0,??MCG_HIRC48_0  ;; 0x40064018
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
     17              MCG_C1 = MCG_C1_CLKS(0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x490A             LDR      R1,??MCG_HIRC48_0+0x4  ;; 0x40064000
   \   00000012   0x7008             STRB     R0,[R1, #+0]
     18              
     19              i = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE000             B        ??MCG_HIRC48_1
     20              while(((MCG_S&MCG_S_CLKST_MASK)!=0) && (i<20000))
     21              {
     22                  i++;
   \                     ??MCG_HIRC48_2: (+1)
   \   00000018   0x1C40             ADDS     R0,R0,#+1
     23              }
   \                     ??MCG_HIRC48_1: (+1)
   \   0000001A   0x4909             LDR      R1,??MCG_HIRC48_0+0x8  ;; 0x40064006
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0x220C             MOVS     R2,#+12
   \   00000020   0x4211             TST      R1,R2
   \   00000022   0xD002             BEQ      ??MCG_HIRC48_3
   \   00000024   0x4907             LDR      R1,??MCG_HIRC48_0+0xC  ;; 0x4e20
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD3F6             BCC      ??MCG_HIRC48_2
     24              if(i<20000)
   \                     ??MCG_HIRC48_3: (+1)
   \   0000002A   0x4906             LDR      R1,??MCG_HIRC48_0+0xC  ;; 0x4e20
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD201             BCS      ??MCG_HIRC48_4
     25              {
     26                  return 48000000;
   \   00000030   0x4805             LDR      R0,??MCG_HIRC48_0+0x10  ;; 0x2dc6c00
   \   00000032   0xE000             B        ??MCG_HIRC48_5
     27              }
     28              else
     29              {
     30                  return 0;
   \                     ??MCG_HIRC48_4: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \                     ??MCG_HIRC48_5: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
   \                     ??MCG_HIRC48_0:
   \   00000038   0x40064018         DC32     0x40064018
   \   0000003C   0x40064000         DC32     0x40064000
   \   00000040   0x40064006         DC32     0x40064006
   \   00000044   0x00004E20         DC32     0x4e20
   \   00000048   0x02DC6C00         DC32     0x2dc6c00
     31              }
     32          }
     33          
     34          
     35          
     36          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   MCG_HIRC48


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      76  MCG_HIRC48

 
 76 bytes in section .text
 
 76 bytes of CODE memory

Errors: none
Warnings: none
