###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        22/Feb/2016  16:12:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\cmp\cmp.c
#    Command line =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\cmp\cmp.c
#        -D IAR -D FREEDOM -lCN
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\List\
#        -o
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\projects\platinum\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\common\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\cpu\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\cpu\headers\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\lptmr\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\mcg\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\pmc\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\rcm\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\smc\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\uart\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\wdog\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\drivers\cmp\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\..\..\src\platforms\
#        -I
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\..\
#        -Ol --use_c++_inline
#    List file    =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\List\cmp.lst
#    Object file  =  
#        C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\build\iar\platinum\FLASH_32KB\Obj\cmp.o
#
###############################################################################

C:\Users\b51443\Desktop\kl03-frdm-demo\kl03-frdm-demo\src\drivers\cmp\cmp.c
      1          /*
      2           * File:        cmp.c
      3           * Purpose:     Provide common CMP routines
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          
     10          #include "common.h"
     11          #include "cmp.h"
     12          
     13          /********************************************************************/
     14          /*
     15           * Initialize the CMP for operation, interrupts, clock select, input select
     16           * 
     17           *
     18           * NOTE: Since the Comparitors are pinned out in multiple locations on most
     19           *       Kinetis devices, this driver does not enable CMP pin functions.
     20           *       The desired pins should be enabled before calling this init function.
     21           *
     22           * Parameters:
     23           *  cmpch           - CMP channel to initialize
     24           *  rising_falling  - equal to bit mask in the CMP_SCR Register
     25           *                    CMP_SCR_IER_MASK or CMP_SCR_IEF_MASK
     26           
     27           
     28           * the reset of these inputs  are not yet implemented
     29           *  clk             - CMP module Clock
     30           *  inp         cmp pos input selection
     31           *  inn         cmp neg input selection
     32           *  outen       cmp output enable
     33           *  dacval      cmp dac input setting.
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          void cmp_init (CMP_MemMapPtr cmpch, unsigned char rising_falling ) 
     36          {
     37                         // Filter and digital hysteresis disabled
     38                       CMP_CR0_REG(cmpch) = 0x00;
   \                     cmp_init: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x7002             STRB     R2,[R0, #+0]
     39                       // no sample(continuous), no window, -, HS mode, 
     40                       // no invert, COUTA(unfiltered), output pin enable, moduledisable
     41                       CMP_CR1_REG(cmpch) = CMP_CR1_PMODE_MASK | CMP_CR1_COS_MASK | CMP_CR1_OPE_MASK; //0x16;
   \   00000004   0x2216             MOVS     R2,#+22
   \   00000006   0x7042             STRB     R2,[R0, #+1]
     42                       // Filter disabled
     43                       CMP_FPR_REG(cmpch) = 0x00;
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x7082             STRB     R2,[R0, #+2]
     44                       // Enable rising or falling edge interrupts, clear flags
     45                       CMP_SCR_REG(cmpch) = //CMP_SCR_IER_MASK |
     46                                            rising_falling |
     47                                            //CMP_SCR_IEF_MASK | 
     48                                            CMP_SCR_CFR_MASK |
     49                                            CMP_SCR_CFF_MASK;   //0x1E
   \   0000000C   0x2206             MOVS     R2,#+6
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x70C2             STRB     R2,[R0, #+3]
     50                       // 6-bit DAC enabled, output set to 1/2-scale, Vdd reference
     51                       CMP_DACCR_REG(cmpch) = CMP_DACCR_DACEN_MASK |
     52                                              CMP_DACCR_VRSEL_MASK |
     53                                              CMP_DACCR_VOSEL(0x20);   //0xE0;
   \   00000012   0x21E0             MOVS     R1,#+224
   \   00000014   0x7101             STRB     R1,[R0, #+4]
     54                       // P-input as external channel 0, M-input as 6b DAC
     55                       CMP_MUXCR_REG(cmpch) = CMP_MUXCR_PSEL(0) |
     56                                              CMP_MUXCR_MSEL(7);   //0x07;
   \   00000016   0x2107             MOVS     R1,#+7
   \   00000018   0x7141             STRB     R1,[R0, #+5]
     57          
     58                       // enable CMP
     59                       CMP_CR1_REG(cmpch) |= CMP_CR1_EN_MASK;
   \   0000001A   0x7841             LDRB     R1,[R0, #+1]
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x430A             ORRS     R2,R2,R1
   \   00000020   0x7042             STRB     R2,[R0, #+1]
     60          }
   \   00000022   0x4770             BX       LR               ;; return
     61          
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void cmp0_isr(void)
     64          {
   \                     cmp0_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     65            GPIOB_PSOR = 0x00080000;           // set Port B 19 indicate wakeup
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x0300             LSLS     R0,R0,#+12       ;; #+524288
   \   00000006   0x....             LDR      R1,??DataTable0  ;; 0x400ff044
   \   00000008   0x6008             STR      R0,[R1, #+0]
     66          
     67            printf("\n[CMP0_ISR]****ISR entered*****\r\n\n");
   \   0000000A   0x....             LDR      R0,??DataTable0_1
   \   0000000C   0x.... 0x....      BL       printf
     68            printf("[CMP0_ISR]CMP0_SCR   = %#02X ",    (CMP0_SCR ))  ;
   \   00000010   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0xB2C9             UXTB     R1,R1
   \   00000016   0x....             LDR      R0,??DataTable0_3
   \   00000018   0x.... 0x....      BL       printf
     69            if (CMP0_SCR & CMP_SCR_CFR_MASK) {
   \   0000001C   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x0740             LSLS     R0,R0,#+29
   \   00000022   0xD50E             BPL      ??cmp0_isr_0
     70               CMP0_SCR |= CMP_SCR_CFR_MASK;  
   \   00000024   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x4301             ORRS     R1,R1,R0
   \   0000002C   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   0000002E   0x7001             STRB     R1,[R0, #+0]
     71               printf(" CMP0_CFR set and is now clear \n");
   \   00000030   0x....             LDR      R0,??DataTable0_4
   \   00000032   0x.... 0x....      BL       printf
     72               printf("[CMP0_ISR]CMP0_SCR   = %#02X ",    (CMP0_SCR ))  ;
   \   00000036   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   00000038   0x7801             LDRB     R1,[R0, #+0]
   \   0000003A   0xB2C9             UXTB     R1,R1
   \   0000003C   0x....             LDR      R0,??DataTable0_3
   \   0000003E   0x.... 0x....      BL       printf
     73            }
     74            if (CMP0_SCR & CMP_SCR_CFF_MASK) {
   \                     ??cmp0_isr_0: (+1)
   \   00000042   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x0780             LSLS     R0,R0,#+30
   \   00000048   0xD50E             BPL      ??cmp0_isr_1
     75               CMP0_SCR |= CMP_SCR_CFF_MASK;  
   \   0000004A   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x2102             MOVS     R1,#+2
   \   00000050   0x4301             ORRS     R1,R1,R0
   \   00000052   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   00000054   0x7001             STRB     R1,[R0, #+0]
     76               printf(" CMP0_CFF set and is now clear \n");
   \   00000056   0x....             LDR      R0,??DataTable0_5
   \   00000058   0x.... 0x....      BL       printf
     77               printf("[CMP0_ISR]CMP0_SCR   = %#02X ",    (CMP0_SCR ))  ;
   \   0000005C   0x....             LDR      R0,??DataTable0_2  ;; 0x40073003
   \   0000005E   0x7801             LDRB     R1,[R0, #+0]
   \   00000060   0xB2C9             UXTB     R1,R1
   \   00000062   0x....             LDR      R0,??DataTable0_3
   \   00000064   0x.... 0x....      BL       printf
     78            }
     79            return;  
   \                     ??cmp0_isr_1: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
     80          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x400FF044         DC32     0x400ff044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x40073003         DC32     0x40073003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0A 0x5B          DC8 "\012[CMP0_ISR]****ISR entered*****\015\012\012"
   \              0x43 0x4D    
   \              0x50 0x30    
   \              0x5F 0x49    
   \              0x53 0x52    
   \              0x5D 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x49    
   \              0x53 0x52    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x0D    
   \              0x0A 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x5B 0x43          DC8 "[CMP0_ISR]CMP0_SCR   = %#02X "
   \              0x4D 0x50    
   \              0x30 0x5F    
   \              0x49 0x53    
   \              0x52 0x5D    
   \              0x43 0x4D    
   \              0x50 0x30    
   \              0x5F 0x53    
   \              0x43 0x52    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x20 0x43          DC8 " CMP0_CFR set and is now clear \012"
   \              0x4D 0x50    
   \              0x30 0x5F    
   \              0x43 0x46    
   \              0x52 0x20    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x63    
   \              0x6C 0x65    
   \              0x61 0x72    
   \              0x20 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x20 0x43          DC8 " CMP0_CFF set and is now clear \012"
   \              0x4D 0x50    
   \              0x30 0x5F    
   \              0x43 0x46    
   \              0x46 0x20    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x77    
   \              0x20 0x63    
   \              0x6C 0x65    
   \              0x61 0x72    
   \              0x20 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   cmp0_isr
         8   -> printf
       0   cmp_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
      36  ?_0
      32  ?_1
      36  ?_2
      36  ?_3
     106  cmp0_isr
      36  cmp_init

 
 140 bytes in section .rodata
 166 bytes in section .text
 
 166 bytes of CODE  memory
 140 bytes of CONST memory

Errors: none
Warnings: none
